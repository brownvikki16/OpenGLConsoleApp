#version 330

in vec4 vertexColor;
in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

out vec4 color;

const int MAX_POINT_LIGHTS = 3;

struct Light
{

	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;	
};

struct DirectionalLight 
{
	Light base;
	vec3 direction;
	
};

struct PointLight
{
	Light base;
	vec3 position;
	float constant;
	float linear;
	float exponent;
};

uniform int pointLightCount;

uniform sampler2D theTexture;
uniform DirectionalLight directionalLight;
uniform PointLight pointLights[MAX_POINT_LIGHTS];

vec4 CalcLightByDirection(Light light, vec3 direction)
{

	vec4 ambientColor = vec4(light.color, 1.0f) * light.ambientIntensity;  

	float diffuseFactor = max(dot(normalize(Normal), normalize(direction)), 0.0f);	
	vec4 diffuseColor = vec4(light.color * light.diffuseIntensity * diffuseFactor, 1.0f);	
	
	return (ambientColor + diffuseColor);

}

vec4 CalcDirectionalLight()
{
	return CalcLightByDirection(directionalLight.base, directionalLight.direction);
}

vec4 CalcPointLights()
{
	vec4 totalColor = vec4(0 ,0 ,0 ,0);
	for(int i = 0; i < pointLightCount; i++)
	{
		vec3 direction = FragPos - pointLights[i].position;
		float distance = length(direction);
		direction = normalize(direction);
	
		vec4 color = CalcLightByDirection(pointLights[i].base, direction);		
		float attenuation = pointLights[i].exponent * distance * distance +
					pointLights[i].linear * distance +
					pointLights[i].constant;

		totalColor += (color/attenuation);
	}

		
	return totalColor;
}


void main()
{
	vec4 finalColor = CalcDirectionalLight();
	finalColor += CalcPointLights();

	color = texture(theTexture, TexCoord) * finalColor;

}